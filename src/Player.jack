/** Создание и обновление изображения игроока */
class Player {
  field int xPos, yPos;                                 // координата по X, Y
  field int width, height;                              // ширина, высота игрока
  field int numPlayerState;                             // номер текущего положения
  field Array currPlayer;                               // рисунок текущего положения
  field Array firstState, secondState, thirdState;      // рисунок состояний игрока

  /** Конструктор принимает координату по y для начального отображения игрока */
  constructor Player new(int playerYPosDefault) {
    let yPos = playerYPosDefault;
    let xPos = 160;
    let width = 16;
    let height = 12;
    let numPlayerState = 0;
    do buildFirstArray();
    do buildSecondArray();
    do buildThirdArray();
    do draw();
    return this;
  }

  /** Сдвиг игрока вверх */
  method void moveUp()
  {
    do erase();
    if (yPos > height + 5) {
      let yPos = yPos - 5;
    } else {
      let yPos = height;
    }
    return;
  }

  /** Сдвиг игрока вниз */
  method void moveDown()
  {
    do erase();
    if (yPos < 225) {
      let yPos = yPos + 30;
    } else {
      let yPos = 255;
    }
    return;
  }

  /** Удаление изображения игрока */
  method void erase()
  {
    do Screen.setColor(false);
    do Screen.drawRectangle(xPos, yPos, xPos + width, yPos + height);
    return;
  }

  /** Создание первого состояния игрока */
  method void buildFirstArray() {

    let firstState = Array.new(12);

    let firstState[0] = 4032;
    let firstState[1] = 4656;
    let firstState[2] = 8456;
    let firstState[3] = 20766;
    let firstState[4] = 20769;
    let firstState[5] = 16961;
    let firstState[6] = -959;
    let firstState[7] = -32222;
    let firstState[8] = -740;
    let firstState[9] = -32252;
    let firstState[10] = 31768;
    let firstState[11] = 992;

    return;
  }

  /** Создание второго состояния игрока */
  method void buildSecondArray() {

    let secondState = Array.new(12);

    let secondState[0] = 4032;
    let secondState[1] = 4656;
    let secondState[2] = 8456;
    let secondState[3] = 20740;
    let secondState[4] = 20740;
    let secondState[5] = 16958;
    let secondState[6] = -959;
    let secondState[7] = -32191;
    let secondState[8] = -706;
    let secondState[9] = -32252;
    let secondState[10] = 31768;
    let secondState[11] = 992;

    return;
  }

  /** Создание третьего состояния игрока */
  method void buildThirdArray() {

    let thirdState = Array.new(12);

    let thirdState[0] = 4032;
    let thirdState[1] = 4656;
    let thirdState[2] = 8456;
    let thirdState[3] = 20740;
    let thirdState[4] = 20740;
    let thirdState[5] = 16898;
    let thirdState[6] = -962;
    let thirdState[7] = -32191;
    let thirdState[8] = -735;
    let thirdState[9] = -32239;
    let thirdState[10] = 31774;
    let thirdState[11] = 992;

    return;
  }

  /** Определение состояний игрока */
  method void cyclePlayerState()
  {
    let numPlayerState = MyMath.mod (numPlayerState + 1, 3);
    return;
  }

  /** Координаты текущего состояния игрока */
  method Array getCurrState()
  {
    if (numPlayerState = 0) {
      return firstState;
    }
    if (numPlayerState = 1) {
      return secondState;
    }
    return thirdState;
  }

  /** Отрисовка игрока */
  method void draw() {
    var int memAddress;
    let memAddress = (16384 + (yPos * 32) + (xPos/16));
    let currPlayer = getCurrState();

    do Memory.poke(memAddress+0, currPlayer[0]);
    do Memory.poke(memAddress+32, currPlayer[1]);
    do Memory.poke(memAddress+64, currPlayer[2]);
    do Memory.poke(memAddress+96, currPlayer[3]);
    do Memory.poke(memAddress+128, currPlayer[4]);
    do Memory.poke(memAddress+160, currPlayer[5]);
    do Memory.poke(memAddress+192, currPlayer[6]);
    do Memory.poke(memAddress+224, currPlayer[7]);
    do Memory.poke(memAddress+256, currPlayer[8]);
    do Memory.poke(memAddress+288, currPlayer[9]);
    do Memory.poke(memAddress+320, currPlayer[10]);
    do Memory.poke(memAddress+352, currPlayer[11]);
    return;
  }

  method int getXPos() {
    return xPos;
  }

  method int getYPos() {
    return yPos;
  }

  method int getWidth() {
    return width;
  }

  method int getHeight() {
    return height;
  }

  /** Удаление всех объектов, созданных в данном классе */
  method void dispose() {
     do Memory.deAlloc(this);
     return;
  }
}
